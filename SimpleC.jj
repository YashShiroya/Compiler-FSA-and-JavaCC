
PARSER_BEGIN(SimpleC)

/** Simple brace matcher. */
public class SimpleC {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SimpleC parser = new SimpleC(System.in);
    parser.Input();
  }

}

PARSER_END(SimpleC)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| <"//" (~["\r","\n"])* ("\r"|"\n")>
| <"/*" (~"*/") "*/">
}

TOKEN :
{

  <ID: <LETTER> (<LETTER>|<DIGIT>|"_")*>
| <LETTER: (["A"-"Z"]|["a"-"z"])>
| <DIGIT: ["0"-"9"]>
| <LPARENT: "(">
| <RPARENT: ")">
| <LCURLY: "{">
| <RCURLY: "}">
| <LBRACE: "[">
| <RBRACE: "]">
| <COMMA: ",">
| <SEMICOLON: ";">
| <EQUAL: "=">
| <AMPERSAND: "&">
| <OROR: "||">
| <ANDAND: "&&">
| <EQUALEQUAL: "==">
| <NOTEQUAL: "!=">
| <LESS: "<">
| <GREAT: ">">
| <LESSEQUAL: "<=">
| <GREATEQUAL: ">=">
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIVIDE: "/">
| <PERCENT: "%">

}


/**Root production. */
void Input() :
{ int count; }
{
  count=anytoken() <EOF>
  { System.out.println("The number of tokens is " + count); }
}

int anytoken():
{
  Token t;
  int count=0;
}
{
  (
   t = <LPARENT> { System.out.println("LPARENT, \""+t.image+"\"" ); count++; } |
   t = <RPARENT> { System.out.println("RPARENT, \""+t.image+"\"" ); count++; } | 
   t = <ID> { System.out.println("ID, \""+t.image+"\"" ); count++; } | 
   t = <LETTER> { System.out.println("LETTER, \""+t.image+"\"" ); count++; } | 
   t = <DIGIT> { System.out.println("DIGIT, \""+t.image+"\"" ); count++; }
  )+
  {return count;}
}

