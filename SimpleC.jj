
PARSER_BEGIN(SimpleC)

/** Simple brace matcher. */
public class SimpleC {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SimpleC parser = new SimpleC(System.in);
    parser.Input();
  }

}

PARSER_END(SimpleC)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| <"//" (~["\r","\n"])* ("\r"|"\n")>
| <"/*" (~["*"]~["/"])* "*/">
}

TOKEN :
{

  <LPARENT: "(">
| <RPARENT: ")">
| <LCURLY: "{">
| <RCURLY: "}">
| <LBRACE: "[">
| <RBRACE: "]">
| <COMMA: ",">
| <SEMICOLON: ";">
| <EQUAL: "=">
| <AMPERSAND: "&">
| <OROR: "||">
| <ANDAND: "&&">
| <EQUALEQUAL: "==">
| <NOTEQUAL: "!=">
| <LESS: "<">
| <GREAT: ">">
| <LESSEQUAL: "<=">
| <GREATEQUAL: ">=">
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIVIDE: "/">
| <PERCENT: "%">
| <CHARSTARSTAR: "char**">
| <CHARSTAR: "char*">
| <LONGSTAR: "long*">
| <LONG: "long">
| <VOID: "void">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <FOR: "for">
| <CONTINUE: "continue">
| <BREAK: "break">
| <RETURN: "return">
| <DOUBLESTAR: "double*">
| <DOUBLE: "double">
| <ID: <LETTER> (<LETTER>|<DIGIT>|"_")*>
| <LETTER: (["A"-"Z"]|["a"-"z"])>
| <DIGIT: ["0"-"9"]>
| <CHAR_CONST: "," <PRINTING_CHAR> | "\\"("0") | "\n" | "\r" | "\\"("0") <OCTAL> <OCTAL> ",">
| <STRING_CONST: "\"" (
                <PRINTING_CHAR>
                | "\\"("0") <OCTAL> <OCTAL>
                | "\\" | ("0") <OCTAL> <OCTAL>
                | "\\" "x" <HEX_DIGIT> <HEX_DIGIT>
                | "\\" ("n"|"t"|"r"|"0")
                )* "\""> 
| <INTEGER_CONST: <DIGIT> (<DIGIT>)* | <DIGIT> (<DIGIT>)* "_" <HEX_DIGIT> (<HEX_DIGIT>)*>
| <DOUBLE_CONST: (<DIGIT>)* (".")? <DIGIT> (<DIGIT>)* (("e" | "E") ("-" | "+")? <DIGIT> (<DIGIT>)*)?>
| <PRINTING_CHAR: <LETTER> | <DIGIT> | <OTHER_CHAR>>
| <OCTAL: ["0"-"7"]>
| <HEX_DIGIT:<DIGIT>
            | ("A") | ("B") | ("C") | ("D") | ("E") | ("F")
            | ("a") | ("b") | ("c") | ("d") | ("e") | ("f")>
| <OTHER_CHAR
  (" ") | ("!") | ("#") | ("$") | ("%") | ("&") | ("(") | (")")
| ("*") | ("+") | (",") | ("-") | (".") | ("/") | (":") | (";")
| ("<") | ("=") | (">") | ("?") | ("@") | ("[") | ("]") | ("^")
| ("_") | ("`") | ("{") | ("|") | ("}") | ("~")>
}


/**Root production. */
void Input() :
{ int count; }
{
  count=anytoken() <EOF>
  { System.out.println("The number of tokens is " + count); }
}

int anytoken():
{
  Token t;
  int count=0;
}
{
  (
   t = <LPARENT> { System.out.println("LPARENT, \""+t.image+"\"" ); count++; } |
   t = <RPARENT> { System.out.println("RPARENT, \""+t.image+"\"" ); count++; } | 
   t = <ID> { System.out.println("ID, \""+t.image+"\"" ); count++; } | 
   t = <LETTER> { System.out.println("LETTER, \""+t.image+"\"" ); count++; } | 
   t = <DIGIT> { System.out.println("DIGIT, \""+t.image+"\"" ); count++; }
  )+
  {return count;}
}

